// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Type {
  buy
  rent
}

enum UserType {
  renter
  rentee
  home_seller
  home_buyer
  other
}

enum Property {
  apartment
  house
  condo
  land
}
model User {
  id                    String @id @default(auto()) @map("_id") @db.ObjectId
  userType              UserType @default(other)
  username              String @unique
  email                 String @unique
  password              String
  avatar                String?
  createdAt             DateTime @default(now())
  emailToken            String?
  passwordResetToken    String?
  passwordExpiry        DateTime?
  post                  Post[]
  savedPost             SavedPost[]
  chat                  Chat[] @relation(fields: [chatId], references: [id])
  chatId                String[] @db.ObjectId
  
}

model Post {
  id                    String @id @default(auto()) @map("_id") @db.ObjectId
  title                 String
  price                 Int
  unitArea              Int?
  images                String[]
  address               String
  city                  String
  bedroom               Int
  bathroom              Int
  longitude             String
  latitude              String
  type                  Type @default(buy)
  property              Property @default(house)
  createdAt             DateTime @default(now())
  user                  User @relation(fields: [userId], references: [id])
  userId                String @db.ObjectId
  description           String
  savedPost             SavedPost[]
  
}

// model PostDetails {
//  id                     String @id @default(auto()) @map("_id") @db.ObjectId
//  description            String?
//  post                   Post @relation(fields: [postDetailsId], references: [id])
//  postDetailsId          String @db.ObjectId @unique
// }

model SavedPost {
  id                    String @id @default(auto()) @map("_id") @db.ObjectId
  user                  User @relation(fields: [userId], references: [id])
  userId                String @db.ObjectId
  post                  Post @relation(fields: [postId], references: [id])
  postId                String @db.ObjectId
  createdAt             DateTime @default(now())

  @@unique([userId, postId])
}

model Chat {
  id                    String @id @default(auto()) @map("_id") @db.ObjectId
  user                  User[] @relation(fields: [userId], references: [id])
  userId                String[] @db.ObjectId
  seenBy                String[] @db.ObjectId
  lastMessage           String[]
  createdAt             DateTime @default(now())
  messages              Messages[]

}
model Messages {
  id                    String @id @default(auto()) @map("_id") @db.ObjectId
  userId                String
  chat                  Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId                String @db.ObjectId
  text                  String?
  createdAt             DateTime @default(now())
}


